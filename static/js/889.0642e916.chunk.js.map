{"version":3,"file":"static/js/889.0642e916.chunk.js","mappings":"oRAEaA,EAAcC,EAAAA,GAAAA,IAAH,iGAOXC,EAAWD,EAAAA,GAAAA,GAAH,+GAORE,EAAWF,EAAAA,GAAAA,GAAH,yGAMRG,EAAUH,EAAAA,GAAAA,IAAH,2FAKPI,EAAWJ,EAAAA,GAAAA,EAAH,uKAWRK,EAAgBL,EAAAA,GAAAA,EAAH,qK,mECzBX,SAASM,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,IACRE,EAAAA,EAAAA,YAAU,WAAM,wCAId,8GAEyBC,EAAAA,EAAAA,IAAeH,GAFxC,OAEUI,EAFV,OAGIL,EAAUK,GAHd,gDAKIC,MAAM,KAAMC,SALhB,0DAJc,sBACTN,GADS,mCAYdO,EACD,GAAE,CAACP,IACJ,IAAQQ,EAASV,EAATU,KACR,GAAKA,EAGL,OACE,SAACnB,EAAD,UACGmB,EAAKC,QACJ,SAAClB,EAAD,UACGiB,EAAKE,KAAI,gBAAGV,EAAH,EAAGA,GAAIW,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACR,UAACrB,EAAD,YACE,SAACC,EAAD,CACEqB,IACEH,EAAY,8CAC+BA,GAD/B,UAELI,GAETC,IAAKJ,KAEP,UAAClB,EAAD,YACE,0BAAM,UACLkB,MAEH,UAACjB,EAAD,YACE,0BAAM,eACLkB,OAfUb,EADP,OAsBZ,uBAAG,4CAIV,C,+LC/DKiB,EAAU,4CACVC,EAAW,gCAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,6BAA0CD,IAD5D,cACCI,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACkBL,EAAAA,EAAAA,IAAA,UAAaF,EAAb,uBAAoCD,EAApC,kBAAqDQ,IADvE,cACCJ,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAiC1B,GAAjC,uFACkBoB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA8BlB,GAA9B,OAAmCiB,IADrD,cACCI,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAenB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BH,GAA9B,uFACkBoB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA8BlB,EAA9B,mBAA2CiB,IAD7D,cACCI,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAiC3B,GAAjC,uFACkBoB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA8BlB,EAA9B,mBAA2CiB,IAD7D,cACCI,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kE","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastSection = styled.div`\ndisplay: flex;\njustify-content: center;\n>p {\n    font-size: 40px;\n}\n`;\nexport const CastList = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\npadding: 0px;\njustify-content: center;\ngap: 40px;\n`;\nexport const CastItem = styled.li`\nwidth: 250px;\nlist-style: none;\nbackground-color: white;\nborder-radius: 5px;\n`;\nexport const CastImg = styled.img`\nmax-width: 100%;\nheight: 375px;\nborder-radius: 5px 5px 0px 0px;\n`;\nexport const CastName = styled.p`\ndisplay: flex;\nfont-size: 20px;\njustify-content: center;\n\n>span {\n    margin-right:10px;\n    font-size: 20px;\n    font-weight: 500;\n}\n`;\nexport const CastCharacter = styled.p`\ndisplay: flex;\nfont-size: 20px;\njustify-content: center;\n>span {\n    margin-right:10px;\n    font-size: 20px;\n    font-weight: 500;\n}\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fechMoviesCast } from 'services/moviesAPI';\nimport {\n  CastSection,\n  CastList,\n  CastItem,\n  CastImg,\n  CastName,\n  CastCharacter,\n} from './Cast.styled';\nimport NoAvatar from '../../images/unnamed (1).jpg';\n\nexport default function Cast() {\n  const [actors, setActors] = useState([]);\n\n  const { id } = useParams();\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n    async function fechQuery() {\n      try {\n        const movies = await fechMoviesCast(id);\n        setActors(movies);\n      } catch (error) {\n        alert(error.message);\n      }\n    }\n    fechQuery();\n  }, [id]);\n  const { cast } = actors;\n  if (!cast) {\n    return;\n  }\n  return (\n    <CastSection>\n      {cast.length ? (\n        <CastList>\n          {cast.map(({ id, profile_path, name, character }) => (\n            <CastItem key={id}>\n              <CastImg\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/original/${profile_path}`\n                    : `${NoAvatar}`\n                }\n                alt={name}\n              />\n              <CastName>\n                <span>Name:</span>\n                {name}\n              </CastName>\n              <CastCharacter>\n                <span>Character:</span>\n                {character}\n              </CastCharacter>\n            </CastItem>\n          ))}\n        </CastList>\n      ) : (\n        <p>We don't have any cast for this movie.</p>\n      )}\n    </CastSection>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '?api_key=1119a115908e1b3ec65f53aa52c34c18';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function fechMoviesTranding() {\n  const response = await axios.get(`${BASE_URL}trending/movie/day${API_KEY}`);\n  return response.data.results;\n};\n\nexport async function fechMoviesQuery(query) {\n  const response = await axios.get(`${BASE_URL}search/movie${API_KEY}&query=${query}`);\n  return response.data.results;\n};\n\nexport async function fechMoviesDetails(id) {\n  const response = await axios.get(`${BASE_URL}movie/${id}${API_KEY}`);\n  return response.data;\n};\n\nexport async function fechMoviesCast(id) {\n  const response = await axios.get(`${BASE_URL}movie/${id}/credits${API_KEY}`);\n  return response.data;\n};\n\nexport async function fechMoviesReviews(id) {\n  const response = await axios.get(`${BASE_URL}movie/${id}/reviews${API_KEY}`);\n  return response.data.results;\n};\n  \n"],"names":["CastSection","styled","CastList","CastItem","CastImg","CastName","CastCharacter","Cast","useState","actors","setActors","id","useParams","useEffect","fechMoviesCast","movies","alert","message","fechQuery","cast","length","map","profile_path","name","character","src","NoAvatar","alt","API_KEY","BASE_URL","fechMoviesTranding","axios","response","data","results","fechMoviesQuery","query","fechMoviesDetails","fechMoviesReviews"],"sourceRoot":""}